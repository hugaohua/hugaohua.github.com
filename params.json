{
  "name": "Hugaohua.GitHub.com",
  "tagline": "this is my first blong",
  "body": "\r\n# Git\r\n\r\n### 什么是Git\r\n  - Git是一款源代码管理工具(版本控制工具)\r\n  - vpn,vcs....\r\n\r\n  - 凡是由我们手写的代码都称之为源代码\r\n    - jquery这些需要使用Git进行管理。\r\n\r\n  - 源代码有必要管理起吗？\r\n  - 有必要，因为人工的去处理不同的版本，做相应备份会比较麻烦。\r\n  - Git是linux之父当年为了维护linux---linus之前也是手动维护合并把文件发给Linus\r\n    - BitKeeper(收费)\r\n    - 有人想破解(不给提供免费使用)\r\n    - linus自己写了一个版本管理的工具（Git）\r\n\r\n    - \r\n  - Git之前很多使用SVN vss tfs hs 等等\r\n\r\n### Git与SVN\r\n  - Git是分布式版本控制软件。\r\n  - SVN是集中式。\r\n\r\n\r\n\r\n### 版本控制就像玩游戏一样。\r\n  - 超级玛丽('')\r\n  - '\\r\\n'\r\n  - '\\r'\r\n  - ''\r\n\r\n  - 每一次的修改，每一次的提交，就像打游戏一样，100关的游戏，打到第14关，得保存一下，再继续打下一关。不然一关机还得重头再来。\r\n\r\n  \r\n\r\n### 分支的概念\r\n\r\n### 集中式与分布式区别\r\n\r\n\r\n### Git安装\r\n  - 记，\r\n  - 没有太多代码。\r\n  - 查看版本:`git --version`\r\n\r\n\r\n#### 指定代码要备份到哪里\r\n  - 默认是直接备份到项目目录（.git文件夹）\r\n  - 命令：`git init`\r\n    + 初始化一个.git目录(仓储)\r\n    + 通过这个命令会在当前上当创建一个.git的隐藏目录\r\n\r\n\r\n### 自报家门\r\n  - 配置用户名：` git config --global user.name=\"huoqishi\" `\r\n  - 配置邮箱  ：` git config --global user.email=\"huoqishi@itcast.cn\" `\r\n  - 查看配置  ：` git config --list `\r\n\r\n### 初始化一个空的仓储\r\n  - 初始化空仓储:` git init `\r\n    + 这个命令会在当前目录中新建一个隐藏的名为.git的文件夹,里面存储的是项目的各个版本。\r\n  - 千万不要更改.git目录里文件。\r\n\r\n### 查看当前目录文件的状态\r\n  - 命令  : ` git status ` \r\n    + 查看当前工作目录的状态，是已经放到暂存区，还是提交到仓库了。\r\n  - 或命令: ` git status -s ` 查看简要的状态信息\r\n\r\n### 把一头大象放进冰箱需要几步(小插曲)\r\n\r\n### git操作步骤\r\n  - 1.新建一个项目文件夹，进行文件夹中,打git bash执行命令: `git init`\r\n    +　初始化一个git仓储,其实就是一个隐藏的.git文件夹\r\n    +　不要轻易改变里面文件\r\n  - 2.开始新文件，写我们的代码，写完一个功能，执行命令:\r\n    `git add [文件路径]`\r\n    + 示例：`git add ./READEME.md`\r\n    + 表示要把相应的文件添加到暂存区,暂存区和仓储其实都在.git目录中\r\n    + 批量添加 `git add .`\r\n  3.把添加到暂存区的文件提交到仓储中.\r\n    + 命令: `git commit -m \"这时写类似注释的东西\" `\r\n    + *注意：在提交之前需要配置个人信息*\r\n      * `git config --global user.name \"xiaoming\"`\r\n      * `git config --global user.email \"xiaoming@sina.cn\"`\r\n  4. 所有需要备份或者提交的文件及目录都必须在.git所在目录。不要超出.git所在目录\r\n\r\n  x: 在这几步前后，都可以执行命令：`git status`\r\n\r\n### git操作一些注意问题\r\n  - 1.执行git命令的路径:只能够是.git文件夹所在目录\r\n  - 2.项目中文件如果有中文，会被转码\r\n  - 3.\r\n\r\n### 将文件添加到暂存区\r\n  - 命令: ` git add ./file.txt`\r\n    + 将当前目录中的file.txt添加到暂存区\r\n  - 或者: ` git add .`\r\n    + 表示将当前目录所有文件都添加的暂存区.\r\n    + 这是批量添加.\r\n  - 可以对文件执行多次add命令，都会把最新的修改添加到暂存，但是，后页面执行add命令，会把前面执行add命令添加到暂存区的文件覆盖(相同的文件会覆盖)\r\n\r\n### 将暂存区的文件提交到仓储中\r\n  - 命令  : ` git commit -m \"这次我添加了一个变量\" `\r\n    + -m 表示需要指定一个字符串，表示本次提交的代码与上一次相比多了哪些功能，或者是做了哪些修改。\r\n    + 每次提交时都需要写上相应的字符串以做出说明\r\n  - 或命令: ` git commit -m  -c`\r\n    + -c 表示可以在提交时，不提供说明。\r\n    + 不推荐这么做，不利于后期代码维护\r\n    + 提交时只是提交暂存区的代码，没有添加到暂存区的代码不会提交\r\n\r\n### 合并添加到暂存区与提交到仓储的操作\r\n  - 命令: ` git commit -a -m \"这次是命令合并形式的提交\" `\r\n    ＋　对于刚添加的文件第一次提交不能够连写。\r\n\r\n\r\n### 比对文件变化\r\n  - 命令: `git diff`\r\n    + 比较工作区中未添加到暂存区的文件的变化\r\n    + 即比较工作区中与上一次add时文件的状态的对比\r\n  - 命令: `git diff --cached`\r\n    + 比较暂存区文件与上一次提交的文件的差异\r\n\r\n  - 命令: `git diff 版本号1 版本号2 [文件路径]`\r\n    + 比较两个版本中文件的差异\r\n\r\n### 查看日志\r\n  - \r\n  - 命令:`git log`\r\n  - 或命令:`git log --oneline`\r\n\r\n### 一些问题\r\n  - ./idea\r\n\r\n### 忽略文件\r\n- 不要省略/ 除非有必要\r\n- 需要新建一个名为:  .gitignore 的文件\r\n- 这个文件话.git同级目录.\r\n    + 该文件用来告诉我们的git哪些文件不要被添加一仓储中。\r\n    + 忽略某个目录:  /node_modules\r\n    + 忽略某个文件:  /css/my.css\r\n    + 忽略某一类文件:  /css/*.css\r\n    + 忽略目录下所有文件:  *.*\r\n    + 忽略所有名为node_modules的目录:  node_modules\r\n- #号表示注释\r\n\r\n\r\n### 版本回退\r\n  - 命令:`git reset --hard Head`\r\n    + 回到最近一次提交的版本的文件状态\r\n    + git指向的是上一次提交\r\n    + 'git reset --hard Head^^ 表示回到最近往前第二次的提交'\r\n    + Head后面的^表示回退到第几次\r\n  - 命令: `git reset --hard Head~1`\r\n    + 表示回到最近一次提交的前一次提交.\r\n    + Head~2,回退到最近一次提交的前2次提交.\r\n\r\n  - 命令: `git reset --hard [版本号]`\r\n    + 示例: `git reset --hard 12dad211`\r\n\r\n    + 回退到某个具体的版本。\r\n    + 可以配合git reflog命令查看历史操作来进行回退\r\n\r\n  - 这里进行版本回退，并不会对文件进行真实的删除\r\n    + 通过git reflog 可以查看到每一次对版本的切换来提交。\r\n\r\n\r\n### 创建Git分支，并切换分支\r\n- 正在做功能呢，才做了一半，但是为了不丢失代码要提交，又不能影响别人工作。\r\n- 查看有多少分支\r\n  - `git branch`\r\n- 命令: git branch dev\r\n    + 创建了一个名为dev的分支\r\n- 命令: git checkout dev\r\n    + 切换到dev分支\r\n- 创建并切换到指定分支\r\n  + `git checkout -b dev`\r\n\r\n\r\n### 合并Git分支\r\n- 命令: git merge dev\r\n    + 表示将当前分支与dev分支合并\r\n    + 在主分支下执行合并命令.\r\n\r\n- 命令: git branch -d dev\r\n    + 表示删除dev分支,当合并分支后，如果不需要再使用dev分支，则可以直接删除。\r\n    + 不要在dev分支执行这个命令，在别的的分支执行.\r\n\r\n### 解决冲突\r\n- 应该是如何合并冲突。\r\n- 冲突是不可避免的。\r\n- 当在新功能完成后合并前，修改并提交了主分支对应的文件，合并时两个分支中的文件有冲突。\r\n- 手动修改文件，然后提交\r\n\r\n\r\n\r\n### gitHub\r\n[官网地址](https://github.com)\r\n  - 一个免费的github仓储是300M \r\n\r\n#### github与git\r\n  - git是版本管理控制系统\r\n  - github是个网站\r\n    + 提高仓储服务器的功能\r\n  \r\n  - git clone\r\n    + 命令:'git clone [仓储地址]'\r\n    + 会把指定仓储的整个下载来\r\n    + 如果不需要下载整个仓储，只需要最新的一次提交,加上参数--depth\r\n\r\n  - push(推)\r\n    + 命令：`git push [地址] master`\r\n\r\n\r\n  - git remote add origin https://github.com/huoqishi/myrep06.git\r\n    + 这句话就相当与创建了一个变量，变量名是origin,变量值是\r\n    https://github.com/huoqishi/myrep06.git\r\n\r\n### github搭建博客\r\n  - 有个特殊的分支,gh-pages\r\n  - 把我们的页面提交到gh-pages分支，就可以在线浏览。\r\n###  访问示例\r\n  - https://[用户名].github.io/[仓储名]/[仓储下的文件名]\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}